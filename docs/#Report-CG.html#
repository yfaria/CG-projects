<!DOCTYPE html>
<html style="background-color: aliceblue;"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<script type="text/javascript" async
	src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML" async>
</script>
      <title> Trabalho de CG </title>
</head>
  <body style="padding-left: 5%;padding-right: 5%;background-color: white;margin-left: 2.5%;margin-right: 2.5%;"><div id="MathJax_Message" style="display: none;"></div>
    <h1 style="text-align:center">A Transformada de Fourier e algumas aplicações</h1>

    <h2> A transformada de Fourier</h2>

    <p>Seja \(f : \mathbb{R} \to \mathbb{C}\), a transformada de Fourier de f é</p>
    <p style="text-align:center">\[{\hat {f}}(u)=\int _{-\infty }^{\infty }f(x)\ e^{-2\pi ixu}\,dx\]</p>
    <p>quando essa integral existe.</p><br>
    <p>Inicialmente, foi pensada como uma generalização das séries de Fourier com funções não periódicas no contexto de achar solução da equação do calor. Fourier foi a fundo nesse estudo das funções períodicas e hipotetizou que todas as funções podem ser escritas como somas de cossenos e senos.</p>
    <p>A transformada de Fourier tem várias propriedades interessantes. Uma propriedade importante é que as convoluções no domínio de frequência viram multiplicações.Outra se refere ao fato da transformada é uma operação reversível em certas condições, a transformada da transforma retorna a função original, i.e.,</p>
    <p style="text-align:center">\[f(x) = \int _{-\infty }^{\infty } \hat{f}(u)\ e^{2\pi ixu}\,du\] </p>
    <p >No caso discreto (construindo a partir de um trem de impulsos para fazer amostragem da função f contínua e variando nas M frequências desejadas), temos</p>
    <p>\[{\hat {f}}(m)=\sum _{n=0}^{M-1}f(n)\ e^{\frac{-2\pi imn}{M}}\]</p>
    <p> e a inversa vai ter um fator escala :</p>
    <p style="text-align:center">\[f(n)=\frac{1}{M} \sum _{m=0}^{M-1}\hat{f}(m)\ e^{\frac{2\pi imn}{M}}\]</p>
    <p> No caso bidimensional contínuo, temos uma integral dupla; no caso discreto, são dois somatórios e o fator vira \(\frac{1}{MN}\) na inversão.</p><br>

    <h2>FFT</h2>
    <p>Vamos supor o contexto da multiplicação de polinômios pra facilitar o raciocínio.</p>
    <p>Temos 2 polinômios \(A(x)\) e \(B(x)\) de grau \(d\) (potência de 2) e queremos multiplicá-los. Pelo método convencional, isso leva \(O(n^{2})\), pois o k-ésimo coeficiente seria:</p>
    <p>\[c_{k} = \sum_{i=0}^{k} a_{i}b_{k-i}\]</p>
    <p>Se amostrarmos 2d pontos em cada um, fazer multiplicação de todos os pontos e fizermos uma interpolação; temos C(x). Mas a amostragem leva \(O(n^{2})\). Mas podemos melhorar a amostragem : separamos os coeficientes(formando polinômio \(P(x)\) pares dos ímpares \(I(x)\) e temos \(A(x) = P(x^{2}) + xI(x^{2})\), o que permitira cair a amostragem para  \(O(n \log{n})\) escolhendo valores iniciais tais que só metade serão necessárias no próximo nível da recursão, e esses valores são as d raízes complexas da unidade; o que coincide com o cálculo da DFT (uou!) e para termos os coeficientes, aplicamos a mesma coisa pois a DFT é inversível, só multiplicar por um fator para normalizar.</p><br>
    <p>Analisando o caso mais geral, teremos: seja x um array de tamanho N potência de 2 e queremos calcular sua transformada de Fourier discreta (DFT). Temos</p>
    <p>\[{\hat {f}}(m)= F(m) =\sum _{n=0}^{N-1}f(n)\ e^{\frac{-2\pi imn}{N}}\]</p>
    <p>onde m varia de 0 a M-1 para retornar o array com a transformada de Fourier. Isso implica um tempo computacional \(O(n^2)\), pois cada valor no novo array F exigirá percorrer todo o array f; ou seja, cada elemento requer um tempo linear na entrada. Como isso é feito N vezes, a DFT tem complexidade quadrática. Ao dividirmos o array nos índices pares e ímpares, teremos</p>
    <p>\[F(m) = \sum _{n=0}^{N-1}f(n)\ e^{\frac{-2\pi imn}{N}} = \sum _{n=0}^{\frac{N}{2}-1}f(2n)\ e^{\frac{-2 \pi im(2n)}{N}} + \sum _{n=0}^{\frac{N}{2}-1}f(2n+1)\ e^{\frac{-2 \pi im(2n+1)}{N}} = \sum _{n=0}^{\frac{N}{2}-1}f(2n)\ e^{\frac{-2 \pi imn}{\frac{N}{2}}} + e^{-\frac{2 \pi i m}{N}}\sum _{n=0}^{\frac{N}{2}-1}f(2n+1)\ e^{\frac{-2 \pi imn}{\frac{N}{2}}}\]</p>
    <p>Essa derivação é conhecida como o lema de Danielson-Lanczos. Como o elemento da esquerda é a transformada de Fourier nos \(\frac{N}{2}\) elementos do array com índice par e o da direita é uma constante multiplicada pela transformada de Fourier nos \(\frac{N}{2}\) elementos do array com índice ímpar e precisaremos variar o valor de \(m\) um total de \(N\) vezes para obter o array da transformada de Fourier, a complexidade desse cálculo é dada por</p>
    <p>\[T(n) = 2T\left(\frac{n}{2}\right) + O(n)\]</p>
    <p>que, pelo teorema mestre, implica \(T(n) = O(n \log n)\).</p><br>
    <p>Temos um algoritmo para cálculo da DFT recursivo de complexidade \(O(n \log n)\). Entretanto, em muitas das aplicações da DFT, queremos a maior velocidade possível e o menor uso de memória (esse algoritmo é usado em uma ampla gama de aplicações, como a multiplicação de números e o processamento de audio, sendo que este tipicamente envolve arquivos grandes). Para melhorar o algoritmo, nós "abrimos" a recursão e descobre-se que o padrão de valores é dado pela ordem crescente dos números ao inverter os bits com significância do \(\log\) da entrada. Para mais informações sobre esse processo, veja o segundo item da refêrencia bibliográfica (disponível na web); é apresentada uma prova. Adaptando essa informaçã ao algoritmo recursivo para construir um iterativo, temos esse fluxograma do algoritmo novo:</p>
    <center> <img src="fft_fluxograma.png"></img></center>
    <p>Rotineiramente, a FFT é representada com um diagrama de borboleta, mostrando os twiddle factors (os fatores que multiplicam os resultados das FFT intermediárias). No caso com \(n=8\), o diagrama de borboleta pode ser representado como </p>
    <center> <img src="butterfly_81.gif"></img></center>
    <p>e ao final rearranjamos o resultado.</p><br>
    <p>Além disso, é comum ver a representação da transformada de Fourier como uma transformação linear. De fato, como</p>
    <p>\[F(m) =\sum _{n=0}^{N-1}f(n)\ e^{\frac{-2\pi imn}{N}}\]</p>
    <p>,chamando \(W_{N} = e^{\frac{-2\pi i}{N}}\), temos que</p>
    <p>\[\pmb{F} = \begin{pmatrix}
      F(0) \\ F(1) \\ F(2) \\ \vdots \\ F(N-2) \\ F(N-1)
      \end{pmatrix} =
      \begin{pmatrix}
      1 & 1 & 1 & \ldots & 1 & 1 \\
      1 & W_{N} & W_{N}^2 & \ldots & W_{N}^{N-2} & W_{N}^{N-1} \\
      1 & W_{N}^2 & W_{N}^{2\cdot2} & \ldots & W_{N}^{2(N-2)} & W_{N}^{2(N-1)} \\
      \vdots & \vdots & \vdots & \ddots & \vdots & \vdots \\
      1 & W_{N}^{N-2} & W_{N}^{2(N-2)} & \ldots & W_{N}^{(N-2)(N-2)} & W_{N}^{(N-1)(N-2)} \\
      1 & W_{N}^{N-1} & W_{N}^{2(N-1)} & \ldots & W_{N}^{(N-2)(N-1)} & W_{N}^{(N-1)(N-1)}
      \end{pmatrix}
      \begin{pmatrix}
      f(0) \\ f(1) \\ f(2) \\ \vdots \\ f(N-2) \\ f(N-1)
      \end{pmatrix} = \pmb{W}\pmb{f} \]</p>
    <p>É possível dizer que a matriz \(\pmb{W}\) tem colunas ortogonais (além disso, o determinante é \(\sqrt{N}\), não é tão dificil calcular por ser uma matriz de Vandermonde; por isso algumas abordadens da transformada de Fourier são tanto a direta quanto a inversa com o fator de normalização \(\frac{1}{\sqrt{N}}\)). Assim, uma possível interpretação da DFT é que ocorre uma rotação rígida do array de entrada, que seria a transformação para o espaço de Fourier/de frequência.</p>
    <h2>A transformada de Fourier no processamento de imagens</h2>
    <p>Uma das várias aplicações da transformada se resume em tratar a imagem no formato de matriz de intensidades de preto e branco e usá-la como um sinal bidimensional; onde o espaço de frequência vai estar ligado à variação das intensidades tonais na figura : áreas de maior variacão de intensidade tonal serão representadas nas frequências mais altas e as de pouca variação nas frequências mais baixas. No geral, colocamos em grayscale justamente para ter essa informação da variação da tonalidade, mas é possível fazer com a matriz no RGB mesmo (há inclusive formas computacionais bem sofisticadas para isso, como quaterniões por exemplo; entretanto é controverso; vide <a href="https://ieeexplore.ieee.org/document/723451">um artigo sobre o problema da transformada de Fourier numa imagem colorida</a> e <a href="https://stackoverflow.com/questions/9826886/why-fourier-transform-is-not-possible-on-color-images">uma dicussão no StackOverFlow sobre isso<a>).</p>
    <p>Junto do repositório tem um notebook python com alguns processamentos de imagem. Basicamente, as convoluções circulares que podem ser aplicadas como filtros no domínio da figura podem ser representados como filtros de frequência no espaço de Fourier, sendo uma multiplicação ponto a ponto na matriz com a imagem transformada.</p>
    </p>
    <br><br><p>Referências bibliográficas:</p>
    <ul>
      <li>GONZALES, Rafael C.; WOODS, Richard E.: Digital Image Processing, 4. ed. Pearson, 2018</li>
      <li>BRIGHAM, E. Oran: The Fast Fourier Transform and its Applications, Prentice Hall, 1988</li>
      <li>PAPADIMITRIOU, Christos et al.: Algorithms, 1. ed. McGraw-Hill Higher Education, 2006</li>
      <li><a href="http://mathworld.wolfram.com/Danielson-LanczosLemma.html">Lema de Danielson-Lanczos no Wolfram Mathworld</a></li>
      <li>PRESS, William H. et al.:Numerical Recipes-The Art of Scientific Computing, 3. ed. Cambrigde University Press, 2007</li>
    </ul>
  </body>
</html>
